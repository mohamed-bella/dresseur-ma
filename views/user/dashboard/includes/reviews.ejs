<%- include('./head.ejs')  %>
    <%- include('./navbar.ejs')  %>
<div class="container px-4 py-6">
    <div class=" bg-black text-white mb-6">
        <div class="px-6 py-4">
            <h1 class="text-xl font-bold">Avis Clients</h1>
        </div>
    </div>
   
   <!-- Stats Overview Slider -->
<div class="relative mb-6 px-4">
    <!-- Stats Container -->
    <div class="overflow-hidden">
        <div class="stats-slider flex transition-transform duration-300 gap-4">
            <!-- Total Reviews -->
            <div class="stats-slide min-w-[280px] bg-white border border-gray-200 p-6 rounded-lg">
                <div class="text-sm text-gray-600">Total des avis</div>
                <div class="text-2xl font-bold text-black mt-1"><%= reviews.length %></div>
            </div>

            <!-- Average Rating -->
            <div class="stats-slide min-w-[280px] bg-white border border-gray-200 p-6 rounded-lg">
                <div class="text-sm text-gray-600">Note moyenne</div>
                <div class="text-2xl font-bold text-black mt-1 flex items-center">
                    <%= (reviews.reduce((acc, rev) => acc + rev.rating, 0) / reviews.length).toFixed(1) %>
                    <i class="fas fa-star text-red-600 ml-2"></i>
                </div>
            </div>

            <!-- 5 Star Reviews -->
            <div class="stats-slide min-w-[280px] bg-white border border-gray-200 p-6 rounded-lg">
                <div class="text-sm text-gray-600">5 étoiles</div>
                <div class="text-2xl font-bold text-black mt-1">
                    <%= reviews.filter(r => r.rating === 5).length %>
                </div>
            </div>

            <!-- New Reviews -->
            <div class="stats-slide min-w-[280px] bg-white border border-gray-200 p-6 rounded-lg">
                <div class="text-sm text-gray-600">Cette semaine</div>
                <div class="text-2xl font-bold text-black mt-1">
                    <%= reviews.filter(r => new Date(r.createdAt) > new Date(Date.now() - 7*24*60*60*1000)).length %>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Buttons -->
    <button 
        onclick="slideStats('left')" 
        class="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 bg-white border border-gray-200 rounded-full flex items-center justify-center text-gray-600 hover:text-black hover:border-gray-300 transition-colors">
        <i class="fas fa-chevron-left"></i>
    </button>
    <button 
        onclick="slideStats('right')" 
        class="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 bg-white border border-gray-200 rounded-full flex items-center justify-center text-gray-600 hover:text-black hover:border-gray-300 transition-colors">
        <i class="fas fa-chevron-right"></i>
    </button>

    <!-- Dots Navigation -->
    <div class="flex justify-center mt-4 gap-2">
        <% for(let i = 0; i < 4; i++) { %>
            <button 
                onclick="goToSlide(<%= i %>)" 
                class="w-2 h-2 rounded-full bg-gray-300 dot-indicator hover:bg-gray-400 transition-colors"
                data-slide="<%= i %>">
            </button>
        <% } %>
    </div>
</div>

<script>
let currentSlide = 0;
const totalSlides = 4;
const slideWidth = 280 + 16; // slide width + gap
const slider = document.querySelector('.stats-slider');
const dots = document.querySelectorAll('.dot-indicator');

function updateSliderPosition() {
    slider.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
    updateDots();
}

function updateDots() {
    dots.forEach((dot, index) => {
        if (index === currentSlide) {
            dot.classList.add('bg-red-600');
            dot.classList.remove('bg-gray-300');
        } else {
            dot.classList.remove('bg-red-600');
            dot.classList.add('bg-gray-300');
        }
    });
}

function slideStats(direction) {
    if (direction === 'left') {
        currentSlide = Math.max(currentSlide - 1, 0);
    } else {
        currentSlide = Math.min(currentSlide + 1, totalSlides - 1);
    }
    updateSliderPosition();
}

function goToSlide(index) {
    currentSlide = index;
    updateSliderPosition();
}

// Touch support
let touchStartX = 0;
let touchEndX = 0;

slider.addEventListener('touchstart', e => {
    touchStartX = e.changedTouches[0].screenX;
});

slider.addEventListener('touchend', e => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
});

function handleSwipe() {
    const swipeDistance = touchEndX - touchStartX;
    if (Math.abs(swipeDistance) > 50) { // Minimum swipe distance
        if (swipeDistance > 0) {
            slideStats('left');
        } else {
            slideStats('right');
        }
    }
}

// Optional: Auto slide
let autoSlideInterval;

function startAutoSlide() {
    autoSlideInterval = setInterval(() => {
        currentSlide = (currentSlide + 1) % totalSlides;
        updateSliderPosition();
    }, 5000); // Change slide every 5 seconds
}

function stopAutoSlide() {
    clearInterval(autoSlideInterval);
}

// Start auto slide and handle hover
startAutoSlide();
slider.parentElement.addEventListener('mouseenter', stopAutoSlide);
slider.parentElement.addEventListener('mouseleave', startAutoSlide);
</script>

    <% if (reviews.length > 0) { %>
        <!-- Reviews Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <% reviews.forEach(review => { %>
                <div class="bg-white border border-gray-200 hover:border-red-600 transition-colors">
                    <!-- Review Header -->
                    <div class="p-4 border-b border-gray-200">
                        <div class="flex items-start justify-between">
                            <div>
                                <h2 class="font-bold text-gray-900">
                                    <!--  -->
                                </h2>
                                <p class="text-sm text-gray-600 mt-1">
                                    Par <%= review.userId ? review.userId.name : 'Utilisateur anonyme' %>
                                </p>
                            </div>
                            <div class="text-sm text-gray-600">
                                <%= new Date(review.createdAt).toLocaleDateString('fr-FR', {
                                    day: 'numeric',
                                    month: 'long'
                                }) %>
                            </div>
                        </div>
                    </div>

                    <!-- Review Content -->
                    <div class="p-4">
                        <!-- Rating -->
                        <div class="flex items-center mb-3">
                            <div class="flex text-red-600">
                                <% for(let i = 0; i < 5; i++) { %>
                                    <i class="fas fa-star <%= i < review.rating ? 'text-red-600' : 'text-gray-200' %>"></i>
                                <% } %>
                            </div>
                            <span class="ml-2 text-sm text-gray-600">
                                <%= review.rating %>/5
                            </span>
                        </div>

                        <!-- Comment -->
                        <div class="text-gray-600">
                            <%= review.comment || 'Pas de commentaire.' %>
                        </div>

                        <!-- Actions -->
                        <div class="mt-4 pt-4 border-t border-gray-200 flex justify-between">
                            <button class="text-gray-600 hover:text-red-600">
                                <i class="fas fa-reply"></i>
                                <span class="ml-2">Répondre</span>
                            </button>
                            
                            <div class="flex gap-4">
                                <button class="text-gray-600 hover:text-red-600">
                                    <i class="fas fa-flag"></i>
                                </button>
                                <!-- Delete Review Button -->
                                <button 
                                onclick="handleDeleteReview('<%=review._id%>', '<%=user._id%>', this)"
                                class="text-gray-600 hover:text-red-600 p-2 rounded-full transition-all focus:outline-none relative group"
                                data-review-id="<%=review._id%>">
                                <i class="fas fa-archive transition-opacity duration-200"></i>
                                <i class="fas fa-spinner fa-spin absolute inset-0 m-auto opacity-0 transition-opacity duration-200"></i>
                                </button>

                                <script>
                                async function handleDeleteReview(reviewId, profileId, buttonElement) {
                                // Check if already deleting (prevent double clicks)
                                if (buttonElement.disabled) return;

                                // Show loading state
                                const archiveIcon = buttonElement.querySelector('.fa-archive');
                                const spinnerIcon = buttonElement.querySelector('.fa-spinner');

                                try {
                                    // Start loading state
                                    buttonElement.disabled = true;
                                    archiveIcon.classList.add('opacity-0');
                                    spinnerIcon.classList.remove('opacity-0');

                                    // Make API call to delete review
                                    const response = await fetch(`/dashboard/api/reviews/${reviewId}`, {
                                        method: 'DELETE',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            profileId: profileId // Send profile ID for validation
                                        })
                                    });

                                    const data = await response.json();

                                    if (!response.ok) {
                                        throw new Error(data.message || 'Error deleting review');
                                    }

                                    // Success - Refresh the page
                                    window.location.reload();

                                } catch (error) {
                                    console.error('Delete review error:', error);
                                    // Reset button state
                                    archiveIcon.classList.remove('opacity-0');
                                    spinnerIcon.classList.add('opacity-0');
                                    buttonElement.disabled = false;
                                    
                                    // Show error message
                                    showErrorToast(error.message || 'Une erreur est survenue');
                                }
                                }

                                // Optional: Update review statistics
                                function updateReviewStats() {
                                const reviewCountElement = document.querySelector('[data-review-count]');
                                if (reviewCountElement) {
                                    const currentCount = parseInt(reviewCountElement.textContent) || 0;
                                    reviewCountElement.textContent = Math.max(0, currentCount - 1);
                                }
                                }

                                // Show error toast message
                                function showErrorToast(message) {
                                // Implement your preferred toast notification here
                                alert(message); // Simple alert for now
                                }
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    <% } else { %>
        <!-- Empty State -->
        <div class="bg-white border border-gray-200 p-12 text-center">
            <div class="w-16 h-16 mx-auto mb-4 bg-black flex items-center justify-center text-white">
                <i class="fas fa-star text-2xl"></i>
            </div>
            <h3 class="text-lg font-bold text-gray-900">Aucun avis</h3>
            <p class="text-gray-600 mt-2">Les avis de vos clients apparaîtront ici.</p>
        </div>
    <% } %>
</div>
<script>
    // Mobile menu functionality
    document.addEventListener('DOMContentLoaded', function() {
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const closeMobileMenuBtn = document.getElementById('closeMobileMenu');
        const mobileMenu = document.getElementById('mobileMenu');
    
        function toggleMobileMenu() {
            const isOpen = !mobileMenu.classList.contains('translate-x-full');
            mobileMenu.classList.toggle('translate-x-full', isOpen);
            document.body.style.overflow = isOpen ? '' : 'hidden';
        }
    
        mobileMenuBtn?.addEventListener('click', toggleMobileMenu);
        closeMobileMenuBtn?.addEventListener('click', toggleMobileMenu);
    
        // Close menu on escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && !mobileMenu.classList.contains('translate-x-full')) {
                toggleMobileMenu();
            }
        });
    });
    </script>
<!-- Alpine.js functionality -->
<script>
document.addEventListener('alpine:init', () => {
    Alpine.data('reviewsData', () => ({
        currentFilter: 'all',
        ratingFilter: 'all',

        filterReviews() {
            // Implementation would go here
            // You would typically make an API call with the new filters
            console.log('Filtering by:', this.currentFilter, this.ratingFilter);
        },

        replyToReview(reviewId) {
            Swal.fire({
                title: 'Répondre à l\'avis',
                input: 'textarea',
                inputPlaceholder: 'Votre réponse...',
                showCancelButton: true,
                confirmButtonText: 'Répondre',
                cancelButtonText: 'Annuler',
                showLoaderOnConfirm: true,
                preConfirm: (response) => {
                    // Here you would typically make an API call to save the response
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve();
                        }, 1000);
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Réponse envoyée', '', 'success');
                }
            });
        },

        reportReview(reviewId) {
            Swal.fire({
                title: 'Signaler cet avis ?',
                text: 'Vous allez signaler cet avis pour examen.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Oui, signaler',
                cancelButtonText: 'Annuler'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Implementation would go here
                    Swal.fire('Signalé', 'L\'avis a été signalé pour examen.', 'success');
                }
            });
        },

        archiveReview(reviewId) {
            Swal.fire({
                title: 'Archiver cet avis ?',
                text: 'L\'avis sera archivé mais restera accessible dans les archives.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Oui, archiver',
                cancelButtonText: 'Annuler'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Implementation would go here
                    Swal.fire('Archivé', 'L\'avis a été archivé avec succès.', 'success');
                }
            });
        }
    }));
});
</script>